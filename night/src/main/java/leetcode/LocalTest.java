package leetcode;

public class LocalTest {
    /**
     *
     * 原文件大小：44630016
     * deflate：17758047  6364  2713
     * bz2：18355086  8568  4959
     * snappy：26384964  2722  2487
     * lz4：28080341  2613  2430
     * gz：17758059  7223  2682
     *
     * compress_ratio: 2.51323 2.43148 1.6949 1.58937 2.51323 1
     * compress_speed: 7012.89 5208.92 16396 17080 6178.88 0
     * uncompress_speed: 16450.4 8999.8 17945.3 18366.3 16640.6 0
     *
     * max_ratio:2.51323
     * max_compressSpeed:17080
     * min_compressSpeed:7012.89
     * max_uncompressSpeed:18366.3
     * min_uncompressSpeed:16450.4
     *
     * compress_ratio: 1  0.945976  0.456963  0.389478  1
     * compress_speed: 0.410591  0.304972  0.959953  1  0.361761
     * uncompress_speed: 0.895684  0.490017  0.977078  1  0.90604
     *
     * Y = w1*x1 + w2*x2
     *
     * cold-warm
     * y1=0.5 * 1 + 0.5 * 0.410591 = 0.7052955
     * y2=0.5*0.456963*0.5*0.959953 = 0.2284815 + 0.4799765 = 0.708458
     *
     *
     * warm-hot
     * y2=0*0.456963+1*0.959953=0.959953
     * y3=0*0.389478+1*1=1
     *
     * hot-warm
     * y3=0.5*0.389478+0.5*1=0.694739
     * y2=0.5*0.456963*0.5*0.959953 = 0.2284815 + 0.4799765 = 0.708458
     *
     * warm-cold
     * y2=1*0.456963*0*0.959953 = 0.456963
     * y1=1*1+0*0.410591 = 1
     *
     * 开销咋算呢：？
     * 开销是从一个算法更换到另一个算法中所消耗的东西
     *
     * 其他人是频率*查询减少的时间是否大于迁移数据的时间
     *
     * 那我用--频率*查询减少的时间+频率*存储减少的空间是否大于更换压缩的时间+更换压缩使用的空间？？】？？
     * 更换压缩使用的空间要怎么理解？--还是要把压缩率换成暂用空间？？压缩速度换成压缩时间？？--又要换回去？？换回去的话【也不知道能不能行。。。】，周六又白做，甚至还要重新做。
     * 早知道周六就不搞这个了。。。
     * 但是感觉这个开销如果直接相加的话，太大了，那更换算法的可能性就小了，并且还会让总体的吞吐量下降。。。
     * [或者温数据的 1:1 不搞成 0。5 和 0.5 了，而是直接搞成 1 和 1 ]--好像作用也不大
     *
     * 如果效果不好要不要考虑不要温数据，直接使用冷数据和热数据。。
     * @param args
     */
    public static void main(String[] args) {
    }
}
